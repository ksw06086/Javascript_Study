//? 닌자 코드
// # 닌자라 불리던 전설 속 개발자들은 유지보수 담당 개발자를 혹독하게 훈련하고자 (아래에서 소개해 드릴) 다양한 편법을 사용
// # 닌자가 사용하던 편법을 잘 살펴보시고, 자신은 닌자인지, 코드 리뷰어인지, 초보 개발자인지 판단


//# 1. 코드 짧게 쓰기
// 출처: 아주 유명한 라이브러리
//! i가 나타내는 게 뭔지 파악하는데 꽤 많은 시간을 소모 
i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

//# 2. 글자 하나만 사용하기
'글자 하나만 사용해서 변수 이름을 지음. a, b, c처럼'
'for문에서는 i가 아니라 x, y를 쓴다'

//# 3. 약어 사용하기
'list → lst.'
'userAgent → ua.'
'browser → brsr.'
'등등…'

//# 4. 포괄적인 명사 사용하기
'무언가를 명명할 땐 obj, data, value, item, elem 같이 '
'다양한 개념을 포괄할 수 있는 명사를 사용'

//# 5. 철자가 유사한 단어 사용하기
'date와 data같이 유사한 철자를 가진 단어를 조합'

//# 6. 동의어 사용하기
'printMessage라는 함수를 보았을 때'
"이 함수는 어디에 메시지를 출력하는 걸까?"
'프린터를 이용해 메시지를 출력하는 걸까? '
'아니면 그냥 화면에 메시지를 출력해주는 걸까?"라고 '
'생각하게됨'

// # 7. 재미로 언더스코어 사용하기
'이렇게 하면 일거양득입니다. 코드 길이가 늘어나 가독성이 떨어지는 효과가 있고,'
'동료 개발자들은 언더스코어의 의미를 파악하는데 품이 많이 들게 되죠.'

// # 8. 과장 형용사 사용하기
'superElement, megaFrame, niceItem처럼 개체 앞에 적절한 형용사를 붙임'

// # 9. 외부 변수 덮어쓰기
let user = authenticateUser();
function render() {
   let user = anotherValue();
//   ...
//   ...함수 길이가 긺...
//   ...
//   ... // <-- 개발자는 user와 관련된 이 부분의 코드를 수정해야 함
//   ...
}

// # 10. 부작용이 있는 코드 작성하기
'이런 함수에 본래 기능을 넘어선 “유용한” 기능을 더해줍시다.'
'is.., check.., find...등의 접두사가 붙은 함수가 무언가를 바꿀 수 있도록 기능을 더해주면 동료들에게 놀라움을 선사해줄 수 있을 겁니다. 회사에서 당신의 입지는 더 넓어지겠죠.'

